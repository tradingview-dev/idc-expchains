#!/usr/bin/env python3
# coding=utf-8

import argparse
import enum
import os

from adx import ADXDataGenerator
from aquis import AquisDataGenerator
from asx import ASXDataGenerator
from biva import BivaDataGenerator
from canada import CanadaDataGenerator
from cboe import CBOEDataGenerator
from cftc_code import CFTCDataGenerator
from cme import CMEDataGenerator
from finra import FinraDataGenerator
from korea import KoreaDataGenerator
from lang_and_shwarz import Lang, Schwarz
from lib.ConsoleOutput import ConsoleOutput
from moex import MOEXDataGenerator
from mstar import MstarDataGenerator
from nasdaq_gids import NASDAQGIDSDataGenerator
from nasdaqtrader import NASDAQTraderDataGenerator
from nyse import NyseDataGenerator
from saudi import SAUDIDataGenerator
from shanghai import ShanghaiDataGenerator
from taipei import TaipeiDataGenerator
from tokyo import TokyoDataGenerator
from twse import TwseDataGenerator
from upload_to_bucket import run_s3_process_snapshot
from utils import git_commit


class Codes(enum.IntEnum):
    OK = 0
    ERROR = 1
    WARN = 2


def main(args, logger):
    data_clusters = {
        "adx": {"handlers": [{"generator": ADXDataGenerator().generate}]},
        "asx": {"handlers": [{"generator": ASXDataGenerator().generate}]},
        "biva": {"handlers": [{"generator": BivaDataGenerator().generate}]},
        "canada": {"handlers": [{"generator": CanadaDataGenerator().generate, "bucket": "cse"}]},
        "finra": {"handlers": [{"generator": FinraDataGenerator().generate}]},
        "LSX": {"handlers": [{"generator": Lang().generate, "bucket": "lsx"}]},
        "LS": {"handlers": [{"generator": Schwarz().generate, "bucket": "ls"}]},
        "nasdaq_gids": {"handlers": [{"generator": NASDAQGIDSDataGenerator().generate, "bucket": "gids"}]},
        "nasdaqtrader": {"handlers": [{"generator": NASDAQTraderDataGenerator().generate, "bucket": "nasdaq"}]},
        "nyse": {"handlers": [{"generator": NyseDataGenerator().generate, "bucket": "nyse"}, {"generator": NyseDataGenerator().generate, "bucket": "amex"}]},
        "saudi": {"handlers": [{"generator": SAUDIDataGenerator().generate}]},
        "shanghai": {"handlers": [{"generator": ShanghaiDataGenerator().generate}]},
        "taipei": {"handlers": [{"generator": TaipeiDataGenerator().generate}]},
        "tokyo": {"handlers": [{"generator": TokyoDataGenerator().generate}]},
        "twse": {"handlers": [{"generator": TwseDataGenerator().generate}]},
        "rus": {"handlers": [{"generator": MOEXDataGenerator().generate, "bucket": "moex"}]},
        "korea": {"handlers": [{"generator": KoreaDataGenerator().generate}]},
        "cftc": {"handlers": [{"generator": CFTCDataGenerator().generate}]},
        "aquis": {"handlers": [{"generator": AquisDataGenerator().generate}]},
        "mstar": {"handlers": [{"generator": MstarDataGenerator().generate}]},
        "cme": {"handlers": [{"generator": CMEDataGenerator().generate}]},
        "cboe": {"handlers": [{"generator": CBOEDataGenerator().generate}]}
    }
    data_cluster = data_clusters.get(args.data_cluster)
    if not data_cluster:
        logger.error(f"Unknown data cluster: {args.data_cluster}")
        return Codes.ERROR

    files_to_commit = []
    for handler in data_cluster['handlers']:
        try:
            files = handler['generator']()
        except Exception as e:
            logger.error(f"Failed to generate files for '{args.data_cluster}' data cluster CAUSED BY: {e}")
            return Codes.ERROR
        files_to_commit.extend(files)
        try:
            run_s3_process_snapshot(files, handler.get('bucket', args.data_cluster))
        except Exception as e:
            logger.error(f"Failed to update {','.join(files)} files into {handler.get('bucket', args.data_cluster)} bucket for '{args.data_cluster}' data cluster")
            logger.error(e)
            return Codes.ERROR

    try:
        git_commit(files_to_commit, args.branch)
    except Exception as e:
        logger.error(f"Failed to commit [{','.join(files_to_commit)}] files generated by '{args.data_cluster}' data cluster handlers")
        logger.error(e)
        return Codes.ERROR

    return Codes.OK


if __name__ == "__main__":
    logger = ConsoleOutput(os.path.splitext(os.path.basename(__file__))[0])

    parser = argparse.ArgumentParser()
    parser.add_argument("--data_cluster", required=True, type=str, help="Name of the data cluster which must generates")
    parser.add_argument("--branch", type=str, default="", required=False,
                        help="Branch for delivery changed files (if empty then changed files will not delivers)")

    try:
        exit(main(parser.parse_args(), logger))
    except Exception as e:
        logger.error(e)
        exit(Codes.ERROR)